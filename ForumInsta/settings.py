"""
Django settings for ForumInsta project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


NEWS_API_KEY = os.getenv('NEWS_API_KEY')



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY') 
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Indiquer les templates personnalisés pour les erreurs 404 et 403 
handler404 = 'home.views.custom_404' 
handler403 = 'home.views.custom_403'

# Change le titre de l'onglet du navigateur
ADMIN_SITE_HEADER = "InstaForum Administration"

# Change le titre de la page de connexion
ADMIN_SITE_TITLE = "InstaForum Admin Portal"

# Change le texte de la barre de navigation
ADMIN_INDEX_TITLE = "Bienvenue sur le portail d'administration InstaForum"


ALLOWED_HOSTS = ["*"]



# Application definition

INSTALLED_APPS = [
    'daphne',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'api',
    'modelUser',
    'home',
    'forum',
    'news',
    'events',
    'newsletter',
    'messaging',
    'resources',

    "anymail",
    'taggit',
    'channels',
    'django_celery_beat',
    'django_celery_results',
    'debug_toolbar',
    'crispy_forms',
    'crispy_bootstrap4',
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'corsheaders',
    'rest_framework.authtoken',
    'dj_rest_auth',
    'django_filters',
    'admin_interface',
    'colorfield',
    
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
]

# Configuration Celery
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Europe/Paris'

X_FRAME_OPTIONS = 'SAMEORIGIN' # nécessaire pour le chargement de l'interface

from celery.schedules import crontab

CELERY_BEAT_SCHEDULE = {
    'fetch_and_store_news_every_5_minutes': {
        'task': 'news.tasks.fetch_and_store_news',
        'schedule': crontab(minute='*/30'),
        # 'args': (),  # Ajoutez des arguments si nécessaire
    },
}
CELERY_BEAT_SCHEDULE = {
    'fetch_and_active_suspended_user_2_min': {
        'task': 'modelUser.tasks.check_suspended_users',
        'schedule': crontab(minute='*/2'),
        # 'args': (),  # Ajoutez des arguments si nécessaire
    },
}

# Autoriser toutes les origines (à utiliser avec précaution)
CORS_ALLOW_ALL_ORIGINS = True


CORS_ALLOW_HEADERS = [
    'authorization',
    'content-type',
    'x-csrftoken',
    'x-requested-with',
    # Ajoutez d'autres en-têtes si nécessaire
]

CORS_ALLOW_METHODS = [
    'GET',
    'POST',
    'PUT',
    'DELETE',
    'OPTIONS',
    'PATCH',
]

CORS_ALLOW_CREDENTIALS = True



SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
     'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'debug_toolbar.middleware.DebugToolbarMiddleware',

    # Add the account middleware:
    "allauth.account.middleware.AccountMiddleware",
]


ROOT_URLCONF = 'ForumInsta.urls'

ACCOUNT_ADAPTER = 'modelUser.adapter.MyAccountAdapter'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'forum.context_processors.notification_count',
            ],
        },
    },
]


DEFAULT_CHARSET = 'utf-8'

# WSGI_APPLICATION = 'ForumInsta.wsgi.application'


DATABASES = {
    'default': {
        'ENGINE':'django.db.backends.postgresql',
        'NAME': os.getenv('DATABASE_NAME'),
        'USER': os.getenv('DATABASE_USER'),
        'PASSWORD': os.getenv('DATABASE_PASSWORD'),
        'HOST': os.getenv('DATABASE_HOST'),
        'PORT': os.getenv('DATABASE_PORT'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    # {
    #     'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    # },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'fr'
TIME_ZONE = 'Africa/Ndjamena'
USE_I18N = True
USE_L10N = True
USE_TZ = True

from django.utils.translation import gettext_lazy as _

LANGUAGES = [ 
    ('en', _('English')), 
    ('fr', _('Français')),
    ('ar', _('العربية')),  ]

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale'),
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'),]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL ='modelUser.User'

ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
ACCOUNT_EMAIL_REQUIRED = True 
ACCOUNT_USERNAME_REQUIRED = True  
ACCOUNT_EMAIL_VERIFICATION = 'optional'
LOGIN_REDIRECT_URL ='/next'
ACCOUNT_PASSWORD_CHANGE_REDIRECT_URL = 'account_profile' 

# Durée de session par défaut
SESSION_COOKIE_AGE = 60 * 60 * 24 * 7 * 2  # 2 semaines
CRISPY_TEMPLATE_PACK = 'bootstrap4'
# Durée de session prolongée pour "Se souvenir de moi"
ACCOUNT_SESSION_REMEMBER = True



EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# EMAIL_BACKEND = "anymail.backends.brevo.EmailBackend"
# DEFAULT_FROM_EMAIL = "instaforum2025@gmail.com"

# ANYMAIL = {
#     "BREVO_API_KEY": os.getenv('BREVO_API_KEY'),
#     "IGNORE_UNSUPPORTED_FEATURES": True,
# }

AUTHENTICATION_BACKENDS = [
    'modelUser.authentication.EmailOrUsernameBackend',  # Ajoute ton backend personnalisé ici
    'django.contrib.auth.backends.ModelBackend',  
    'allauth.account.auth_backends.AuthenticationBackend',]

ACCOUNT_FORMS = {
    'login': 'modelUser.forms.CustomLoginForm',
    'signup': 'modelUser.forms.CustomSignupForm',
    'reset_password': 'modelUser.forms.CustomResetPasswordForm',
    'change_password': 'modelUser.forms.CustomChangePasswordForm',  # Nouveau
    'set_password': 'modelUser.forms.CustomSetPasswordForm',  # Nouveau
}


ASGI_APPLICATION = 'ForumInsta.asgi.application'

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('127.0.0.1', 6379)], 
        },
    },
}




LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'debug.log',
            'encoding': 'utf-8', 
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'news': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'channels': {
            'handlers': ['console'],
            'level': 'DEBUG',
        },
        'django.channels': {
            'handlers': ['console'],
            'level': 'DEBUG',
        },
    },
}



INTERNAL_IPS = ['127.0.0.1']

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],

}





from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
}
